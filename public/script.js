const showArticlesBtn = document.getElementById("showArticlesBtn");
const searchBtn = document.getElementById("searchBtn");
const searchInput = document.getElementById("searchInput");
const searchAuthorBtn = document.getElementById("searchAuthorBtn");
const authorSelect = document.getElementById("authorSelect");
const articlesTableBody = document.getElementById("articlesTableBody");
const articlesContainer = document.getElementById("articlesContainer");
const createArticleBtn = document.getElementById("createArticleBtn");

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", loadAuthors);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateString) {
    const options = { year: 'numeric', month: 'long', day: 'numeric' };
    return new Date(dateString).toLocaleDateString('ru-RU', options);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π
function displayArticles(articles) {
    articlesTableBody.innerHTML = '';
    const container = document.getElementById("topArticlesContainer");
    articles.forEach((article, index) => {
        const row = document.createElement("tr");

        // –ù–æ–º–µ—Ä
        const numberCell = document.createElement("td");
        numberCell.textContent = index + 1;
        row.appendChild(numberCell);

        // –ù–∞–∑–≤–∞–Ω–∏–µ
        const titleCell = document.createElement("td");
        titleCell.textContent = article.title;
        row.appendChild(titleCell);

        // –ê–≤—Ç–æ—Ä—ã
        const authorsCell = document.createElement("td");
        const authorsList = document.createElement("ul");
        authorsList.className = "authors-list";

        article.authors.forEach(author => {
            const authorItem = document.createElement("li");
            authorItem.textContent = author;
            authorsList.appendChild(authorItem);
        });

        authorsCell.appendChild(authorsList);
        row.appendChild(authorsCell);

        // –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        const dateCell = document.createElement("td");
        dateCell.className = "date";
        dateCell.textContent = formatDate(article.publicationDate);
        row.appendChild(dateCell);

        // –î–µ–π—Å—Ç–≤–∏—è
        const actionsCell = document.createElement("td");
        actionsCell.className = "actions-cell";

        // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–æ–±–Ω–æ–π —Å—Ç–∞—Ç—å–∏
        const createBtn = document.createElement("button");
        createBtn.className = "action-btn create-btn";
        createBtn.innerHTML = "‚ûï";
        createBtn.title = "–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–æ–±–Ω—É—é —Å—Ç–∞—Ç—å—é";
        createBtn.addEventListener("click", createNewArticle);
        actionsCell.appendChild(createBtn);

        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        const deleteBtn = document.createElement("button");
        deleteBtn.className = "action-btn delete-btn";
        deleteBtn.innerHTML = "üóëÔ∏è";
        deleteBtn.title = "–£–¥–∞–ª–∏—Ç—å";
        deleteBtn.addEventListener("click", () => deleteArticle(article._id));
        actionsCell.appendChild(deleteBtn);

        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        const viewBtn = document.createElement('button');
        viewBtn.className = 'action-btn view-btn';
        viewBtn.innerHTML = 'üëÅÔ∏è';
        viewBtn.title = '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—å—é';
        viewBtn.addEventListener('click', () => {
            window.location.href = `/article.html?id=${article._id}`;
        });
        actionsCell.appendChild(viewBtn);

        row.appendChild(actionsCell);
        articlesTableBody.appendChild(row);
    });
    articlesContainer.style.display = "block";
    container.style.display = "none";
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–æ–≤
async function loadAuthors() {
    try {
        const response = await fetch("/api/authors", {
            method: "GET",
            headers: { "Accept": "application/json" }
        });

        if (response.ok) {
            const authors = await response.json();
            authors.forEach(author => {
                const option = document.createElement("option");
                option.value = author;
                option.textContent = author;
                authorSelect.appendChild(option);
            });
        } else {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤—Ç–æ—Ä–æ–≤");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞:", error);
    }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏
async function deleteArticle(id) {
    if (confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Ç–∞—Ç—å—é?")) {
        try {
            const response = await fetch(`/api/articles/${id}`, {
                method: "DELETE",
                headers: { "Accept": "application/json" }
            });

            if (response.ok) {
                await showArticles();
            } else {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏");
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞:", error);
        }
    }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π
async function showArticles() {
    try {
        const response = await fetch("/api/articles", {
            method: "GET",
            headers: { "Accept": "application/json" }
        });

        if (response.ok) {
            const articles = await response.json();
            displayArticles(articles);
        } else {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–µ–π");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞:", error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
async function searchArticles() {
    const searchText = searchInput.value.trim();
    if (!searchText) {
        showArticles();
        return;
    }

    try {
        const response = await fetch(`/api/articles?title=${encodeURIComponent(searchText)}`, {
            method: "GET",
            headers: { "Accept": "application/json" }
        });

        if (response.ok) {
            const articles = await response.json();
            displayArticles(articles);
        } else {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞—Ç–µ–π");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞:", error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π –ø–æ –∞–≤—Ç–æ—Ä—É
async function searchByAuthor() {
    const selectedAuthor = authorSelect.value;
    if (!selectedAuthor) {
        await showArticles();
        return;
    }

    try {
        const response = await fetch(`/api/articles?author=${encodeURIComponent(selectedAuthor)}`, {
            method: "GET",
            headers: { "Accept": "application/json" }
        });

        if (response.ok) {
            const articles = await response.json();
            displayArticles(articles);
        } else {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞—Ç–µ–π –ø–æ –∞–≤—Ç–æ—Ä—É");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞:", error);
    }
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏ (–ø–æ–ª–Ω–æ—Å—Ç—å—é —Å –Ω—É–ª—è)
async function createNewArticle() {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
        <div class="modal-content">
            <h3>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é</h3>
            <div class="form-group">
                <label for="newTitle">–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:</label>
                <input type="text" id="newTitle" required>
            </div>
            <div class="form-group">
                <label for="newAuthors">–ê–≤—Ç–æ—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):</label>
                <input type="text" id="newAuthors" required>
            </div>
            <div class="form-group">
                <label for="newTags">–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):</label>
                <input type="text" id="newTags" required>
            </div>
            <div class="form-group">
                <label for="newContent">–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</label>
                <textarea id="newContent" required> </textarea>
            </div>
            <div class="form-group">
                <label for="newDate">–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</label>
                <input type="date" id="newDate" required>
            </div>
            <div class="modal-buttons">
                <button id="cancelCreate" class="btn cancel-btn">–û—Ç–º–µ–Ω–∞</button>
                <button id="submitCreate" class="btn submit-btn">–°–æ–∑–¥–∞—Ç—å</button>
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const cancelBtn = modal.querySelector('#cancelCreate');
    cancelBtn.addEventListener('click', () => {
        document.body.removeChild(modal);
    });

    const submitBtn = modal.querySelector('#submitCreate');
    submitBtn.addEventListener('click', async () => {
        const title = modal.querySelector('#newTitle').value.trim();
        const authorsInput = modal.querySelector('#newAuthors').value.trim();
        const content = modal.querySelector('#newContent').value.trim();
        const tagsInput = modal.querySelector('#newTags').value.trim();
        const date = modal.querySelector('#newDate').value;

        if (!title || !authorsInput || !date) {
            alert('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!');
            return;
        }

        const authors = authorsInput.split(',').map(author => author.trim());
        const tags = tagsInput.split(',').map(tag =>tag.trim());

        try {
            const response = await fetch("/api/articles", {
                method: "POST",
                headers: {
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    title,
                    authors,
                    content,
                    tags,
                    publicationDate: new Date(date).toISOString()
                })
            });

            if (response.ok) {
                document.body.removeChild(modal);
                await showArticles();
                alert("–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");
            } else {
                alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏");
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞:", error);
            alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏");
        }
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    modal.querySelector('#newDate').valueAsDate = new Date();
}

document.getElementById("topArticlesButton").addEventListener("click", async () => {
    try {
        const response = await fetch("/api/top-articles");
        if (response.ok) {
            const topArticles = await response.json();
            displayTopArticles(topArticles);
        } else {
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ø —Å—Ç–∞—Ç–µ–π");
        }
    } catch (error) {
        console.error(error);
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ø —Å—Ç–∞—Ç–µ–π");
    }
});

function displayTopArticles(articles) {
    const container = document.getElementById("topArticlesContainer");
    container.innerHTML = "";

    if (articles.length === 0) {
        container.innerHTML = "<p>–ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>";
        return;
    }

    articles.forEach(article => {
        const articleElement = document.createElement("div");
        articleElement.className = "top-article";
        articleElement.innerHTML = `
            <h3>${article.title}</h3>
            <p><strong>–ê–≤—Ç–æ—Ä—ã:</strong> ${article.authors.join(", ")}</p>
            <p><strong>–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</strong> ${article.averageRating ? article.averageRating.toFixed(1) : "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"}</p>
            <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:</strong> ${article.reviewCount}</p>
        `;
        container.appendChild(articleElement);
    });
    container.style.display = "block";
    articlesContainer.style.display = "none";
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π
async function searchByDate() {
    const startDate = document.getElementById("startDate").value;
    const endDate = document.getElementById("endDate").value;

    if (!startDate || !endDate) {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±–µ –¥–∞—Ç—ã.");
        return;
    }

    try {
        const response = await fetch(`/api/articles/date-range?startDate=${startDate}&endDate=${endDate}`, {
            method: "GET",
            headers: { "Accept": "application/json" }
        });

        if (response.ok) {
            const articles = await response.json();
            displayArticles(articles);

        } else {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–µ–π");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞:", error);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
showArticlesBtn.addEventListener("click", showArticles);
searchBtn.addEventListener("click", searchArticles);
searchAuthorBtn.addEventListener("click", searchByAuthor);
document.getElementById("searchByDateButton").addEventListener("click", searchByDate)
createArticleBtn.addEventListener("click", createNewArticle);
searchInput.addEventListener("keypress", (e) => {
    if (e.key === "Enter") {
        searchArticles();
    }
});

